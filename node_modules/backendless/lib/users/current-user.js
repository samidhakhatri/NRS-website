"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setLocalCurrentUser = setLocalCurrentUser;
exports.getLocalCurrentUser = getLocalCurrentUser;
exports.getCurrentUserToken = getCurrentUserToken;
exports.setCurrentUserToken = setCurrentUserToken;
exports.getCurrentUser = getCurrentUser;
exports.isValidLogin = isValidLogin;
exports.loggedInUser = loggedInUser;

var _utils = _interopRequireDefault(require("../utils"));

var _async = _interopRequireDefault(require("../request/async"));

var _utils2 = require("./utils");

function setLocalCurrentUser(user) {
  this.currentUser = user || null;

  if (this.app.LocalCache.get('user-token')) {
    this.app.LocalCache.set('user-token', this.currentUser && this.currentUser['user-token'] || undefined);
  }

  if (this.app.LocalCache.get('current-user-id')) {
    this.app.LocalCache.set('current-user-id', this.currentUser && this.currentUser.objectId || undefined);
  }

  this.app.RT.updateUserTokenIfNeeded();
}

function getLocalCurrentUser() {
  return this.currentUser;
}

function getCurrentUserToken() {
  if (this.currentUser && this.currentUser['user-token']) {
    return this.currentUser['user-token'] || null;
  }

  return this.app.LocalCache.get('user-token') || null;
}

function setCurrentUserToken(userToken) {
  userToken = userToken || null;

  if (this.currentUser) {
    this.currentUser['user-token'] = userToken;
  }

  if (this.app.LocalCache.get('user-token')) {
    this.app.LocalCache.set('user-token', userToken);
  }

  this.app.RT.updateUserTokenIfNeeded();
}

function getCurrentUser(asyncHandler) {
  var _this = this;

  if (this.currentUser) {
    var userFromResponse = _utils2.getUserFromResponse.call(this, this.currentUser);

    return asyncHandler ? asyncHandler.success(userFromResponse) : userFromResponse;
  }

  if (this.currentUserRequest && asyncHandler) {
    this.currentUserRequest.then(function (result) {
      return asyncHandler.success(result);
    })["catch"](function (error) {
      return asyncHandler.fault(error);
    });
    return this.currentUserRequest;
  }

  var stayLoggedIn = this.app.LocalCache.get('stayLoggedIn');
  var currentUserId = stayLoggedIn && this.app.LocalCache.get('current-user-id');

  if (currentUserId) {
    var Data = this.app.Data;
    var User = this.app.User;
    return this.currentUserRequest = Data.of(User).findById(currentUserId).then(function (result) {
      _this.currentUserRequest = null;
      _this.currentUser = _utils2.getUserFromResponse.call(_this, result);
      return asyncHandler.success(_this.currentUser);
    })["catch"](function (error) {
      _this.currentUserRequest = null;
      asyncHandler.fault(error);
      throw error;
    });
  }

  return asyncHandler ? asyncHandler.success(null) : null;
}

function isValidLogin()
/** async */
{
  var userToken = this.getCurrentUserToken();

  var responder = _utils["default"].extractResponder(arguments);

  var isAsync = !!responder;

  if (userToken) {
    if (!isAsync) {
      try {
        var result = this.app.request.get({
          url: this.app.urls.userTokenCheck(userToken)
        });
        return !!result;
      } catch (e) {
        return false;
      }
    }

    return this.app.request.get({
      url: this.app.urls.userTokenCheck(userToken),
      isAsync: isAsync,
      asyncHandler: responder
    });
  }

  if (!isAsync) {
    return !!this.getCurrentUser();
  }

  this.getCurrentUser(new _async["default"](function (user) {
    return responder.success(!!user);
  }, function () {
    return responder.success(false);
  }));
}

function loggedInUser() {
  return this.app.LocalCache.get('current-user-id');
}