"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loginWithGooglePlus = loginWithGooglePlus;
exports.loginWithGooglePlusSdk = loginWithGooglePlusSdk;

var _async = _interopRequireDefault(require("../../request/async"));

var _utils = _interopRequireDefault(require("../../utils"));

var _login = require("./login");

var _request = require("./request");

function loginWithGooglePlus(fieldsMapping, permissions, container, stayLoggedIn, asyncHandler) {
  console.warn( // eslint-disable-line no-console
  'Method "loginWithGooglePlus" is deprecated. and will be removed in the nearest release.\n' + 'Use method "loginWithGooglePlusSdk" instead.');
  return _login.loginSocial.call(this, 'GooglePlus', fieldsMapping, permissions, container, stayLoggedIn, asyncHandler);
}

function loginWithGooglePlusSdk(accessToken, fieldsMapping, stayLoggedIn) {
  var context = this;

  _utils["default"].checkPromiseSupport();

  if (typeof accessToken !== 'string') {
    stayLoggedIn = fieldsMapping;
    fieldsMapping = accessToken;
    accessToken = null;
  }

  return new Promise(function (resolve, reject) {
    function loginRequest() {
      var asyncHandler = new _async["default"](resolve, reject);
      return _request.sendSocialLoginRequest.call(context, accessToken, 'googleplus', fieldsMapping, stayLoggedIn, asyncHandler);
    }

    if (accessToken || !fieldsMapping) {
      return loginRequest();
    }

    console.warn( // eslint-disable-line no-console
    'You must pass "accessToken" as the first argument into ' + '"loginWithGooglePlusSdk(accessToken:String, fieldsMapping:Object, stayLoggedIn?:Boolean)" method');

    if (!gapi) {
      return reject(new Error('Google Plus SDK not found'));
    }

    gapi.auth.authorize({
      client_id: fieldsMapping.client_id,
      scope: 'https://www.googleapis.com/auth/plus.login'
    }, function (_ref) {
      var access_token = _ref.access_token,
          error = _ref.error;

      if (error) {
        reject(error);
      } else {
        loginRequest(accessToken = access_token);
      }
    });
  });
}