"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loginWithFacebook = loginWithFacebook;
exports.loginWithFacebookSdk = loginWithFacebookSdk;

var _async = _interopRequireDefault(require("../../request/async"));

var _utils = _interopRequireDefault(require("../../utils"));

var _login = require("./login");

var _request = require("./request");

function loginWithFacebook(fieldsMapping, permissions, stayLoggedIn, asyncHandler) {
  console.warn( // eslint-disable-line no-console
  'Method "loginWithFacebook" is deprecated. and will be removed in the nearest release.\n' + 'Use method "loginWithFacebookSdk" instead.');
  return _login.loginSocial.call(this, 'Facebook', fieldsMapping, permissions, null, stayLoggedIn, asyncHandler);
}

function loginWithFacebookSdk(accessToken, fieldsMapping, stayLoggedIn, options) {
  var context = this;

  _utils["default"].checkPromiseSupport();

  if (typeof accessToken !== 'string') {
    options = stayLoggedIn;
    stayLoggedIn = fieldsMapping;
    fieldsMapping = accessToken;
    accessToken = null;
  }

  return new Promise(function (resolve, reject) {
    function loginRequest() {
      var asyncHandler = new _async["default"](resolve, reject);
      return _request.sendSocialLoginRequest.call(context, accessToken, 'facebook', fieldsMapping, stayLoggedIn, asyncHandler);
    }

    if (accessToken || !fieldsMapping) {
      return loginRequest();
    } // eslint-disable-next-line no-console


    console.warn('You must pass "accessToken" as the first argument into ' + ' "loginWithFacebook(accessToken:String, fieldsMapping:Object, stayLoggedIn?:Boolean)" method');

    if (!FB) {
      return reject(new Error('Facebook SDK not found'));
    }

    FB.getLoginStatus(function (response) {
      if (response.status === 'connected') {
        loginRequest(accessToken = response.authResponse.accessToken);
      } else {
        FB.login(function (response) {
          return loginRequest(accessToken = response.authResponse.accessToken);
        }, options);
      }
    });
  });
}