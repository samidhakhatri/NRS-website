"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _utils = _interopRequireDefault(require("../utils"));

//TODO: refactor me
var FindHelpers = {
  searchRectangle: function searchRectangle(arg) {
    var rect = ['nwlat=' + arg[0], 'nwlon=' + arg[1], 'selat=' + arg[2], 'selon=' + arg[3]];
    return rect.join('&');
  },
  latitude: function latitude(arg) {
    return 'lat=' + arg;
  },
  longitude: function longitude(arg) {
    return 'lon=' + arg;
  },
  metadata: function metadata(arg) {
    return 'metadata=' + encodeURIComponent(JSON.stringify(arg));
  },
  units: function units(arg) {
    return 'units=' + arg;
  },
  radius: function radius(arg) {
    return 'r=' + arg;
  },
  categories: function categories(arg) {
    arg = _utils["default"].isString(arg) ? [arg] : arg;
    return 'categories=' + _utils["default"].encodeArrayToUriComponent(arg);
  },
  includeMetadata: function includeMetadata(arg) {
    return 'includemetadata=' + arg;
  },
  pageSize: function pageSize(arg) {
    if (arg < 1) {
      throw new Error('PageSize can not be less then 1');
    }

    return 'pagesize=' + arg;
  },
  offset: function offset(arg) {
    if (arg < 0) {
      throw new Error('Offset can not be less then 0');
    }

    return 'offset=' + arg;
  },
  relativeFindPercentThreshold: function relativeFindPercentThreshold(arg) {
    if (arg <= 0) {
      throw new Error('Threshold can not be less then or equal 0');
    }

    return 'relativeFindPercentThreshold=' + arg;
  },
  relativeFindMetadata: function relativeFindMetadata(arg) {
    return 'relativeFindMetadata=' + encodeURIComponent(JSON.stringify(arg));
  },
  condition: function condition(arg) {
    return 'whereClause=' + encodeURIComponent(arg);
  },
  degreePerPixel: function degreePerPixel(arg) {
    return 'dpp=' + arg;
  },
  clusterGridSize: function clusterGridSize(arg) {
    return 'clustergridsize=' + arg;
  },
  geoFence: function geoFence(arg) {
    return 'geoFence=' + arg;
  }
};
var _default = FindHelpers;
exports["default"] = _default;