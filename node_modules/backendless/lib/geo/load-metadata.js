"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadMetadata = loadMetadata;

var _cluster = _interopRequireDefault(require("./cluster"));

var _point = _interopRequireDefault(require("./point"));

var _query = _interopRequireDefault(require("./query"));

var _findHelpers = _interopRequireDefault(require("./find-helpers"));

//TODO: refactor me
function loadMetadata(geoObject, asyncHandler) {
  var isCluster = geoObject instanceof _cluster["default"];
  var isPoint = geoObject instanceof _point["default"];

  if (!geoObject.objectId || !isCluster && !isPoint) {
    throw new Error('Method argument must be a valid instance of GeoPoint or GeoCluster persisted on the server');
  }

  var url = this.app.urls.geoPointMetaData(geoObject.objectId);

  if (isCluster) {
    var geoQuery = geoObject.geoQuery;

    if (!(geoQuery instanceof _query["default"])) {
      throw new Error('Invalid GeoCluster object. ' + 'Make sure to obtain an instance of GeoCluster using the Backendless.Geo.find API');
    }

    url += '?';

    for (var prop in geoQuery) {
      if (geoQuery.hasOwnProperty(prop) && _findHelpers["default"].hasOwnProperty(prop) && geoQuery[prop] != null) {
        url += '&' + _findHelpers["default"][prop](geoQuery[prop]);
      }
    }
  }

  return this.app.request.get({
    url: url,
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler
  });
}