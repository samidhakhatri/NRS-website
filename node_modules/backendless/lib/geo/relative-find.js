"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.relativeFind = relativeFind;

var _urls = _interopRequireDefault(require("../urls"));

var _utils = _interopRequireDefault(require("../utils"));

var _request = _interopRequireDefault(require("../request"));

var _point = _interopRequireDefault(require("./point"));

var _queryValidator = require("./query-validator");

var _queryParams = require("./query-params");

//TODO: refactor me
function relativeFind(query, asyncHandler) {
  if (!(query.relativeFindMetadata && query.relativeFindPercentThreshold)) {
    throw new Error('Inconsistent geo query. ' + 'Query should contain both relativeFindPercentThreshold and relativeFindMetadata');
  }

  (0, _queryValidator.validateQueryObject)(query);
  query.url = this.app.urls.geoRelative();
  var url = query.url + (query.searchRectangle ? '/rect' : '/points') + '?' + (0, _queryParams.toQueryParams)(query);

  if (asyncHandler) {
    asyncHandler = _utils["default"].wrapAsync(asyncHandler, function (resp) {
      return responseParser(resp);
    });
  }

  var result = this.app.request.get({
    url: url,
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler
  });

  if (asyncHandler) {
    return result;
  }

  return responseParser(result);
}

function responseParser(items) {
  return items.map(function (item) {
    return {
      geoPoint: new _point["default"](item.geoPoint),
      matches: item.matches
    };
  });
}