"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sendRequest = sendRequest;

var _backendlessRequest = _interopRequireDefault(require("backendless-request"));

var _requestForBrowser = require("./request-for-browser");

function sendRequest(config) {
  var XMLHttpRequest = this.app.XMLHttpRequest;
  var userToken = this.app.getCurrentUserToken(); //--TODO remove this checking when we get rid of all sync methods

  if (config.isAsync === false || !config.asyncHandler) {
    if (XMLHttpRequest) {
      // eslint-disable-next-line no-console
      console.warn('The sync methods of the Backendless API are deprecated and will be removed in the nearest future.\n' + 'Please, use async methods instead.');
      return (0, _requestForBrowser.ajaxForBrowser)(XMLHttpRequest, config, userToken);
    }

    throw new Error('Using the sync methods of the Backendless API in Node.js are disallowed.\n' + 'Use the async methods instead.');
  } //---------------------------------------------------------------


  _backendlessRequest["default"].verbose = !!this.app.debugMode;
  _backendlessRequest["default"].XMLHttpRequest = XMLHttpRequest;
  var url = config.url;
  var method = (config.method || 'GET').toLowerCase();
  var headers = config.headers || {};

  var onError = config.asyncHandler.fault || function (error) {
    throw error;
  };

  var onSuccess = config.asyncHandler.success || function (result) {
    return result;
  };

  if (userToken) {
    headers['user-token'] = userToken;
  }

  return _backendlessRequest["default"][method](url, config.data).set(headers).query(config.query).form(config.form).then(onSuccess, onError);
}