"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.find = find;
exports.findById = findById;
exports.findFirst = findFirst;
exports.findLast = findLast;

var _utils = _interopRequireDefault(require("../../utils"));

var _async = _interopRequireDefault(require("../../request/async"));

var _queryBuilder = _interopRequireDefault(require("../query-builder"));

var _extractQueryOptions = require("./extract-query-options");

//TODO: refactor me
function findUtil(url, Model, dataQuery, asyncHandler) {
  var _this = this;

  dataQuery = dataQuery || {};
  var dataQueryURL = dataQuery.url;

  if (dataQuery instanceof _queryBuilder["default"]) {
    dataQuery = dataQuery.build();
  }

  var query = [];

  if (asyncHandler) {
    asyncHandler = _utils["default"].wrapAsync(asyncHandler, function (resp) {
      return _this.parseFindResponse(resp);
    });
  }

  if (dataQuery.options) {
    query.push((0, _extractQueryOptions.extractQueryOptions)(dataQuery.options));
  }

  if (dataQuery.condition) {
    query.push('where=' + encodeURIComponent(dataQuery.condition));
  }

  if (dataQuery.havingClause) {
    query.push('having=' + encodeURIComponent(dataQuery.havingClause));
  }

  if (Array.isArray(dataQuery.properties)) {
    dataQuery.properties.forEach(function (property) {
      query.push('property=' + encodeURIComponent(property));
    });
  }

  if (Array.isArray(dataQuery.excludeProps) && dataQuery.excludeProps.length) {
    query.push('excludeProps=' + _utils["default"].encodeArrayToUriComponent(dataQuery.excludeProps));
  }

  if (dataQueryURL) {
    url += '/' + dataQueryURL;
  }

  if (query.length) {
    url += '?' + query.join('&');
  }

  var result = this.app.request.get({
    url: url,
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler,
    cachePolicy: dataQuery.cachePolicy
  });

  if (asyncHandler) {
    return result;
  }

  return this.parseFindResponse(result, Model, this.classToTableMap);
}

function find(queryBuilder, asyncHandler) {
  //TODO: add an ability to get object as QueryBuilder
  if (queryBuilder instanceof _async["default"]) {
    asyncHandler = queryBuilder;
    queryBuilder = undefined;
  }

  if (queryBuilder && !(queryBuilder instanceof _queryBuilder["default"])) {
    throw new Error('The first argument should be instance of Backendless.DataQueryBuilder');
  }

  var dataQuery = queryBuilder ? queryBuilder.build() : {};
  var url = this.app.urls.dataTable(this.className);
  return findUtil.call(this, url, this.model, dataQuery, asyncHandler, this.classToTableMap);
}

function findById() {
  var _this2 = this;

  var argsObj;

  var responder = _utils["default"].extractResponder(arguments);

  var url = this.app.urls.dataTable(this.className);

  if (_utils["default"].isString(arguments[0])) {
    argsObj = !(arguments[1] instanceof _async["default"]) ? arguments[1] || {} : {};
    argsObj.url = arguments[0];

    if (!argsObj.url) {
      throw new Error('missing argument "object ID" for method findById()');
    }

    return findUtil.call(this, url, this.model, argsObj, responder, this.classToTableMap);
  } else if (_utils["default"].isObject(arguments[0])) {
    argsObj = arguments[0];
    var isAsync = !!responder;
    var send = '/pk?';

    for (var key in argsObj) {
      send += key + '=' + argsObj[key] + '&';
    }

    if (responder) {
      responder = _utils["default"].wrapAsync(responder, function (resp) {
        return _this2.parseFindResponse(resp);
      });
    }

    var result = this.app.request.get({
      url: url + send.replace(/&$/, ''),
      isAsync: isAsync,
      asyncHandler: responder
    });
    return isAsync ? result : this.parseFindResponse(result);
  }
}

function findFirst(dataQuery, asyncHandler) {
  if (dataQuery instanceof _async["default"]) {
    asyncHandler = dataQuery;
    dataQuery = {};
  }

  dataQuery.url = 'first';
  var url = this.app.urls.dataTable(this.className);
  return findUtil.call(this, url, this.model, dataQuery, asyncHandler, this.classToTableMap);
}

function findLast(dataQuery, asyncHandler) {
  if (dataQuery instanceof _async["default"]) {
    asyncHandler = dataQuery;
    dataQuery = {};
  }

  dataQuery.url = 'last';
  var url = this.app.urls.dataTable(this.className);
  return findUtil.call(this, url, this.model, dataQuery, asyncHandler, this.classToTableMap);
}