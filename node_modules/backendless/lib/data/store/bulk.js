"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bulkCreate = bulkCreate;
exports.bulkUpdate = bulkUpdate;
exports.bulkDelete = bulkDelete;

var _utils = _interopRequireDefault(require("../../utils"));

var _async = _interopRequireDefault(require("../../request/async"));

function bulkCreate(objects, asyncHandler) {
  var MSG_ERROR = 'Invalid bulkCreate argument. ' + 'The first argument must contain only array of objects.';

  if (!_utils["default"].isArray(objects)) {
    throw new Error(MSG_ERROR);
  }

  objects.forEach(function (obj) {
    if (!_utils["default"].isObject(obj) || Array.isArray(obj)) {
      throw new Error(MSG_ERROR);
    }
  });
  return this.app.request.post({
    url: this.app.urls.dataBulkTable(this.className),
    data: objects,
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler
  });
}

function bulkUpdate(where, changes, asyncHandler) {
  if (!where || !_utils["default"].isString(where)) {
    throw new Error('Invalid bulkUpdate argument. The first argument must be "whereClause" string.');
  }

  if (!_utils["default"].isObject(changes) || Array.isArray(changes) || changes instanceof _async["default"]) {
    throw new Error('Invalid bulkUpdate argument. The second argument must be object.');
  }

  return this.app.request.put({
    url: this.app.urls.dataBulkTable(this.className),
    query: {
      where: where
    },
    data: changes,
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler
  });
}

function bulkDelete(where, asyncHandler) {
  if (!_utils["default"].isArray(where) && !_utils["default"].isString(where)) {
    throw new Error('Invalid bulkDelete argument. ' + 'The first argument must contain array of objects or array of id or "whereClause" string.');
  }

  var queryData = {
    where: _utils["default"].isString(where) ? where : objectsToWhereClause(where)
  };
  return this.app.request.post({
    url: this.app.urls.dataBulkTableDelete(this.className),
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler,
    data: queryData
  });
}

function objectsToWhereClause(objects) {
  var objectIds = objects.map(function (obj) {
    if (!obj || !_utils["default"].isString(obj) && !obj.objectId) {
      throw new Error('Can not transform "objects" to "whereClause". ' + 'Item must be a string or an object with property "objectId" as string.');
    }

    return "'".concat(_utils["default"].isString(obj) ? obj : obj.objectId, "'");
  });
  return "objectId in (".concat(objectIds.join(','), ")");
}