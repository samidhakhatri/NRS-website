"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _applyDecoratedDescriptor2 = _interopRequireDefault(require("@babel/runtime/helpers/applyDecoratedDescriptor"));

var _utils = _interopRequireDefault(require("../utils"));

var _decorators = require("../decorators");

var _user = _interopRequireDefault(require("../users/user"));

var _permissions = _interopRequireDefault(require("./permissions"));

var _store = _interopRequireDefault(require("./store"));

var _queryBuilder = _interopRequireDefault(require("./query-builder"));

var _loadRelationsQueryBuilder = _interopRequireDefault(require("./load-relations-query-builder"));

var _describe2 = require("./describe");

var _point = _interopRequireDefault(require("./geo/point"));

var _linestring = _interopRequireDefault(require("./geo/linestring"));

var _polygon = _interopRequireDefault(require("./geo/polygon"));

var _geometry = _interopRequireDefault(require("./geo/geometry"));

var _spatialReferenceSystem = _interopRequireDefault(require("./geo/spatial-reference-system"));

var _wktParser = _interopRequireDefault(require("./geo/wkt-parser"));

var _geoJsonParser = _interopRequireDefault(require("./geo/geo-json-parser"));

var _dec, _dec2, _dec3, _class;

var Data = (_dec = (0, _decorators.deprecated)('Backendless.Data', 'Backendless.Data.describe'), _dec2 = (0, _decorators.deprecated)('Backendless.Data', 'Backendless.Data.of(<ClassName>).save'), _dec3 = (0, _decorators.deprecated)('Backendless.Data', 'Backendless.Data.of(<ClassName>).save'), (_class = /*#__PURE__*/function () {
  function Data(app) {
    (0, _classCallCheck2["default"])(this, Data);
    this.app = app;
    this.classToTableMap = (0, _defineProperty2["default"])({}, _user["default"].className, _user["default"]);
    this.Permissions = new _permissions["default"](app);
    this.QueryBuilder = _queryBuilder["default"];
    this.LoadRelationsQueryBuilder = _loadRelationsQueryBuilder["default"];
    this.Point = _point["default"];
    this.LineString = _linestring["default"];
    this.Polygon = _polygon["default"];
    this.Geometry = _geometry["default"];
    this.GeoJSONParser = _geoJsonParser["default"];
    this.WKTParser = _wktParser["default"];
    this.SpatialReferenceSystem = _spatialReferenceSystem["default"];
  }

  (0, _createClass2["default"])(Data, [{
    key: "of",
    value: function of(model) {
      return new _store["default"](model, this.classToTableMap, this.app);
    }
  }, {
    key: "describeSync",
    value: function describeSync() {
      var _Utils$synchronized;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return (_Utils$synchronized = _utils["default"]["synchronized"](_describe2.describe)).call.apply(_Utils$synchronized, [this].concat(args));
    }
  }, {
    key: "describe",
    value: function describe() {
      var _Utils$promisified;

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return (_Utils$promisified = _utils["default"].promisified(_describe2.describe)).call.apply(_Utils$promisified, [this].concat(args));
    }
  }, {
    key: "save",
    value: function save(className, obj) {
      return this.of(className).save(obj);
    }
  }, {
    key: "saveSync",
    value: function saveSync(className, obj, asyncHandler) {
      return this.of(className).saveSync(obj, asyncHandler);
    }
  }, {
    key: "mapTableToClass",
    value: function mapTableToClass(tableName, clientClass) {
      if (typeof tableName === 'function') {
        clientClass = tableName;
        tableName = _utils["default"].getClassName(clientClass);
      }

      if (!tableName || typeof tableName !== 'string') {
        throw new Error('Table Name must be provided and must be a string.');
      }

      if (!clientClass || typeof clientClass !== 'function') {
        throw new Error('Class must be provided and must be a constructor function.');
      }

      this.classToTableMap[tableName] = clientClass;
    }
  }]);
  return Data;
}(), ((0, _applyDecoratedDescriptor2["default"])(_class.prototype, "describeSync", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "describeSync"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "save", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "save"), _class.prototype), (0, _applyDecoratedDescriptor2["default"])(_class.prototype, "saveSync", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, "saveSync"), _class.prototype)), _class));
exports["default"] = Data;