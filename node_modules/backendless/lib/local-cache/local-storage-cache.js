"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _utils = _interopRequireDefault(require("../utils"));

var _cache = _interopRequireDefault(require("./cache"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var STORAGE_KEY_NAMESPACE = 'Backendless';

var composeStorageKey = function composeStorageKey(app) {
  var applicationId = app.applicationId,
      standalone = app.standalone;
  var key = STORAGE_KEY_NAMESPACE;

  if (standalone) {
    key += "-".concat(applicationId);
  }

  return key;
};

var expired = function expired(obj) {
  if (_utils["default"].isObject(obj)) {
    var withTTL = 'cachePolicy' in obj && 'timeToLive' in obj.cachePolicy && 'created' in obj.cachePolicy && obj.cachePolicy.timeToLive !== -1;

    if (withTTL) {
      var ttl = obj['cachePolicy']['timeToLive'];
      var age = new Date().getTime() - obj['cachePolicy']['created'];
      return age > ttl;
    }
  }

  return false;
};

var addTimestamp = function addTimestamp(obj) {
  if (_utils["default"].isObject(obj)) {
    if ('cachePolicy' in obj && 'timeToLive' in obj['cachePolicy']) {
      obj['cachePolicy']['created'] = new Date().getTime();
    }
  }
};

var LocalStorageCache = /*#__PURE__*/function (_Cache) {
  (0, _inherits2["default"])(LocalStorageCache, _Cache);

  var _super = _createSuper(LocalStorageCache);

  function LocalStorageCache() {
    var _this;

    (0, _classCallCheck2["default"])(this, LocalStorageCache);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.__storageKey = composeStorageKey(_this.app);
    _this.__storage = window.localStorage;

    _this.initStorage();

    return _this;
  }

  (0, _createClass2["default"])(LocalStorageCache, [{
    key: "initStorage",
    value: function initStorage() {
      if (!this.storage) {
        this.storage = {};
      }
    }
  }, {
    key: "exists",
    value: function exists(key) {
      return this.get(key) !== undefined;
    }
  }, {
    key: "set",
    value: function set(key, value) {
      if (value === undefined) {
        return this.remove(key);
      }

      var storage = this.storage;
      addTimestamp(value);
      storage[key] = value;
      this.storage = storage;
      return value;
    }
  }, {
    key: "get",
    value: function get(key) {
      var storage = this.storage;
      var value = storage[key];

      if (expired(value)) {
        delete storage[key];
        this.storage = storage;
        return;
      }

      if (value && value['cachePolicy']) {
        delete value['cachePolicy'];
      }

      return value;
    }
  }, {
    key: "remove",
    value: function remove(key) {
      key = key.replace(/([^A-Za-z0-9-])/g, ''); //TODO maybe we have to check always

      var storage = this.storage;

      if (storage.hasOwnProperty(key)) {
        delete storage[key];
        this.storage = storage;
      }
    }
  }, {
    key: "getAll",
    value: function getAll() {
      var storage = this.storage;
      var result = {};

      for (var key in storage) {
        if (storage.hasOwnProperty(key)) {
          var value = storage[key]; //TODO maybe we have to filter expired

          if (value !== null && value.hasOwnProperty('cachePolicy')) {
            delete value['cachePolicy'];
          }

          result[key] = value;
        }
      }

      return result;
    }
  }, {
    key: "flushExpired",
    value: function flushExpired() {
      var storage = this.storage;

      for (var key in storage) {
        if (storage.hasOwnProperty(key)) {
          var value = storage[key];

          if (expired(value)) {
            delete storage[key];
          }
        }
      }

      this.storage = storage;
    }
  }, {
    key: "getCachePolicy",
    value: function getCachePolicy(key) {
      var storage = this.storage;
      var value = storage[key];
      return value ? value['cachePolicy'] : undefined;
    }
  }, {
    key: "storage",
    get: function get() {
      return this.deserialize(this.__storage.getItem(this.__storageKey)) || {};
    },
    set: function set(storage) {
      this.__storage.setItem(this.__storageKey, this.serialize(storage));
    }
  }]);
  return LocalStorageCache;
}(_cache["default"]);

exports["default"] = LocalStorageCache;