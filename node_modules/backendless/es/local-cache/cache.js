"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var Cache = /*#__PURE__*/function () {
  function Cache(app) {
    (0, _classCallCheck2["default"])(this, Cache);
    this.app = app;
    this.__storage = {};
  }

  (0, _createClass2["default"])(Cache, [{
    key: "exists",
    value: function exists(key) {
      return this.get(key) !== undefined;
    }
  }, {
    key: "set",
    value: function set(key, value) {
      return this.storage[key] = this.serialize(value);
    }
  }, {
    key: "get",
    value: function get(key) {
      var result = this.storage[key];
      return result && this.deserialize(result);
    }
  }, {
    key: "remove",
    value: function remove(key) {
      return delete this.storage[key];
    }
  }, {
    key: "clear",
    value: function clear() {
      this.storage = {};
    }
  }, {
    key: "flushExpired",
    value: function flushExpired() {}
  }, {
    key: "getCachePolicy",
    value: function getCachePolicy()
    /** key */
    {}
  }, {
    key: "getAll",
    value: function getAll() {
      var result = {};

      for (var key in this.storage) {
        if (this.storage.hasOwnProperty(key)) {
          result[key] = this.get(key);
        }
      }

      return result;
    }
  }, {
    key: "serialize",
    value: function serialize(value) {
      return JSON.stringify(value);
    }
  }, {
    key: "deserialize",
    value: function deserialize(value) {
      if (typeof value !== 'string') {
        return undefined;
      }

      try {
        return JSON.parse(value);
      } catch (e) {
        return value || undefined;
      }
    }
  }, {
    key: "storage",
    get: function get() {
      return this.__storage;
    },
    set: function set(storage) {
      return this.__storage = storage;
    }
  }]);
  return Cache;
}();

exports["default"] = Cache;