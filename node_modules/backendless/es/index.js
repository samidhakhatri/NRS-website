"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _backendlessRequest = _interopRequireDefault(require("backendless-request"));

var _request = _interopRequireDefault(require("./request"));

var _urls = _interopRequireDefault(require("./urls"));

var _utils = _interopRequireDefault(require("./utils"));

var DEFAULT_PROPS = {
  appId: null,
  apiKey: null,
  serverURL: 'https://api.backendless.com',
  debugMode: false,
  standalone: false,
  ServerCode: null,
  XMLHttpRequest: typeof XMLHttpRequest !== 'undefined' ? XMLHttpRequest : undefined
};
var root = (typeof self === "undefined" ? "undefined" : (0, _typeof2["default"])(self)) === 'object' && self.self === self && self || (typeof global === "undefined" ? "undefined" : (0, _typeof2["default"])(global)) === 'object' && global.global === global && global;
var previousBackendless = root && root.Backendless; // Backendless supports two signatures for the initApp method
// two args - applicationId {String} and secretKey {String}
// or one argument - whole set of options {Object}

var parseInitConfig = function parseInitConfig() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var appId = args[0],
      apiKey = args[1];

  if (appId && (0, _typeof2["default"])(appId) === 'object') {
    return appId;
  }

  return {
    appId: appId,
    apiKey: apiKey
  };
};

var SERVICES = {
  'Logging': function Logging() {
    return require('./logging')["default"];
  },
  'Counters': function Counters() {
    return require('./counters')["default"];
  },
  'Cache': function Cache() {
    return require('./cache')["default"];
  },
  'Commerce': function Commerce() {
    return require('./commerce')["default"];
  },
  'Users': function Users() {
    return require('./users')["default"];
  },
  'BL': function BL() {
    return require('./bl')["default"];
  },
  'Geo': function Geo() {
    return require('./geo')["default"];
  },
  'Data': function Data() {
    return require('./data')["default"];
  },
  'Messaging': function Messaging() {
    return require('./messaging')["default"];
  },
  'Files': function Files() {
    return require('./files')["default"];
  },
  'RT': function RT() {
    return require('./rt')["default"];
  },
  'SharedObject': function SharedObject() {
    return require('./rso')["default"];
  },
  'LocalCache': function LocalCache() {
    return require('./local-cache')["default"];
  }
};

var Backendless = /*#__PURE__*/function () {
  function Backendless(props) {
    (0, _classCallCheck2["default"])(this, Backendless);
    this.initConfig(props);
    this.Request = _backendlessRequest["default"];
    this.request = new _request["default"](this);
    this.urls = new _urls["default"](this);
  }
  /**
   * @param {Object} config
   */


  (0, _createClass2["default"])(Backendless, [{
    key: "initConfig",
    value: function initConfig(config) {
      for (var key in DEFAULT_PROPS) {
        if (DEFAULT_PROPS.hasOwnProperty(key)) {
          var privateKey = "__".concat(key);
          var defaultValue = this[privateKey] === undefined ? DEFAULT_PROPS[key] : this[privateKey];
          this[privateKey] = config[key] === undefined ? defaultValue : config[key];
        }
      }
    }
    /**
     * @param {string|Object} appId|config
     * @param {string} [secretKey]
     * @returns {Backendless}
     */

  }, {
    key: "initApp",
    value: function initApp() {
      var config = parseInitConfig.apply(void 0, arguments);
      var app = config.standalone ? new Backendless(this) : this;
      app.initConfig(config);
      app.resetRT();

      app.__removeService('LocalCache');

      if (app.__hasService('Logging')) {
        app.Logging.reset();
      }

      if (app.__hasService('Geo')) {
        app.Geo.resetGeofenceMonitoring();
      }

      if (app.__hasService('Users')) {
        app.Users.currentUser = null;
      }

      delete this.__device;
      return app;
    }
  }, {
    key: "__hasService",
    value: function __hasService(name) {
      return !!this["__".concat(name)];
    }
  }, {
    key: "__removeService",
    value: function __removeService(name) {
      delete this["__".concat(name)];
    }
  }, {
    key: "__getService",
    value: function __getService(name) {
      var privateName = "__".concat(name);

      if (!this[privateName]) {
        var Service = SERVICES[name]();
        this[privateName] = new Service(this);
      }

      return this[privateName];
    } ///--------SETTERS/GETTERS-------///
    ///--------standalone-------///

  }, {
    key: "setupDevice",
    value: function setupDevice(device) {
      var Device = require('./device')["default"];

      this.__device = new Device(device);
    } ///----------UTIL METHODS--------///

  }, {
    key: "getCurrentUserToken",
    value: function getCurrentUserToken() {
      return this.Users.getCurrentUserToken();
    }
  }, {
    key: "setCurrentUserToken",
    value: function setCurrentUserToken(userToken) {
      this.Users.setCurrentUserToken(userToken);
    }
  }, {
    key: "noConflict",
    value: function noConflict() {
      if (root) {
        root.Backendless = previousBackendless;
      }

      return this;
    } ///-------------------------------------///
    ///-------------- SERVICES -------------///

  }, {
    key: "resetRT",
    value: function resetRT() {
      if (this.__RT) {
        this.__RT.terminate();

        delete this.__RT;
      }
    }
  }, {
    key: "standalone",
    get: function get() {
      return this.__standalone;
    },
    set: function set(standalone) {
      throw new Error('Setting value to Backendless.standalone directly is not possible, ' + "instead you must use Backendless.initApp({ appId: [APP_ID], apiKey: [API_KEY], standalone: ".concat(standalone, " })"));
    } ///--------applicationId-------///

  }, {
    key: "applicationId",
    get: function get() {
      return this.__appId;
    },
    set: function set(appId) {
      throw new Error("Setting '".concat(appId, "' value to Backendless.applicationId directly is not possible, ") + "instead you must use Backendless.initApp('".concat(appId, "', API_KEY)"));
    } ///--------secretKey-------///

  }, {
    key: "secretKey",
    get: function get() {
      return this.__apiKey;
    },
    set: function set(apiKey) {
      throw new Error("Setting '".concat(apiKey, "' value to Backendless.secretKey directly is not possible, ") + "instead you must use Backendless.initApp(APP_ID, '".concat(apiKey, "')"));
    } ///--------serverURL-------///

  }, {
    key: "serverURL",
    get: function get() {
      return this.__serverURL;
    },
    set: function set(serverURL) {
      this.__serverURL = serverURL;
    } ///--------appPath-------///

  }, {
    key: "appPath",
    get: function get() {
      return [this.serverURL, this.applicationId, this.secretKey].join('/');
    },
    set: function set(appPath) {
      throw new Error("Setting '".concat(appPath, "' value to Backendless.appPath directly is not possible, ") + 'instead you must use Backendless.initApp(APP_ID, API_KEY) for setup the value');
    } ///--------debugMode-------///

  }, {
    key: "debugMode",
    get: function get() {
      return this.__debugMode;
    },
    set: function set(debugMode) {
      debugMode = !!debugMode;

      if (this.__debugMode !== debugMode) {
        this.__debugMode = debugMode;

        if (this.__RT) {
          this.RT.setDebugMode(debugMode);
        }
      }
    } ///--------XMLHttpRequestMode-------///

  }, {
    key: "XMLHttpRequest",
    get: function get() {
      return this.__XMLHttpRequest;
    },
    set: function set(XMLHttpRequest) {
      this.__XMLHttpRequest = XMLHttpRequest;
    } ///--------ServerCode-------///

  }, {
    key: "ServerCode",
    get: function get() {
      return this.__ServerCode;
    },
    set: function set(ServerCode) {
      this.__ServerCode = ServerCode;
    } ///--------device-------///

  }, {
    key: "device",
    get: function get() {
      if (!this.__device) {
        throw new Error('Device is not defined. Please, run the Backendless.setupDevice');
      }

      return this.__device;
    },
    set: function set(props) {
      throw new Error('Setting value to Backendless.device directly is not possible, ' + 'instead you must use Backendless.setupDevice(deviceProperties) for setup the device');
    }
  }, {
    key: "Utils",
    get: function get() {
      return _utils["default"];
    }
  }, {
    key: "browser",
    get: function get() {
      return require('./user-agent').getUserAgent();
    }
  }, {
    key: "Logging",
    get: function get() {
      return this.__getService('Logging');
    }
  }, {
    key: "Counters",
    get: function get() {
      return this.__getService('Counters');
    }
  }, {
    key: "Cache",
    get: function get() {
      return this.__getService('Cache');
    }
  }, {
    key: "Commerce",
    get: function get() {
      return this.__getService('Commerce');
    }
  }, {
    key: "Users",
    get: function get() {
      return this.__getService('Users');
    }
  }, {
    key: "User",
    get: function get() {
      return require('./users/user')["default"];
    }
  }, {
    key: "UserService",
    get: function get() {
      return this.Users;
    }
  }, {
    key: "BL",
    get: function get() {
      return this.__getService('BL');
    }
  }, {
    key: "CustomServices",
    get: function get() {
      return this.BL.CustomServices;
    }
  }, {
    key: "Events",
    get: function get() {
      return this.BL.Events;
    }
  }, {
    key: "Geo",
    get: function get() {
      return this.__getService('Geo');
    }
  }, {
    key: "Data",
    get: function get() {
      return this.__getService('Data');
    }
  }, {
    key: "Messaging",
    get: function get() {
      return this.__getService('Messaging');
    }
  }, {
    key: "Files",
    get: function get() {
      return this.__getService('Files');
    }
  }, {
    key: "RT",
    get: function get() {
      return this.__getService('RT');
    }
  }, {
    key: "SharedObject",
    get: function get() {
      return this.__getService('SharedObject');
    }
  }, {
    key: "LocalCache",
    get: function get() {
      return this.__getService('LocalCache');
    } ///-------------- SERVICES -------------///
    ///-------------------------------------///
    ///-------------------------------------///
    ///--------BACKWARD COMPATIBILITY-------///
    //TODO: do we need to remove it?

  }, {
    key: "GeoQuery",
    get: function get() {
      return this.Geo.Query;
    }
  }, {
    key: "GeoPoint",
    get: function get() {
      return this.Geo.Point;
    }
  }, {
    key: "GeoCluster",
    get: function get() {
      return this.Geo.Cluster;
    }
    /** @deprecated */

  }, {
    key: "Persistence",
    get: function get() {
      return this.Data;
    }
  }, {
    key: "DataQueryBuilder",
    get: function get() {
      return this.Data.QueryBuilder;
    }
  }, {
    key: "LoadRelationsQueryBuilder",
    get: function get() {
      return this.Data.LoadRelationsQueryBuilder;
    }
  }, {
    key: "Bodyparts",
    get: function get() {
      return this.Messaging.Bodyparts;
    }
  }, {
    key: "PublishOptions",
    get: function get() {
      return this.Messaging.PublishOptions;
    }
  }, {
    key: "DeliveryOptions",
    get: function get() {
      return this.Messaging.DeliveryOptions;
    }
  }, {
    key: "PublishOptionsHeaders",
    get: function get() {
      return this.Messaging.PublishOptionsHeaders;
    }
  }, {
    key: "EmailEnvelope",
    get: function get() {
      return this.Messaging.EmailEnvelope;
    }
    /** @deprecated */

  }, {
    key: "SubscriptionOptions",
    get: function get() {
      return this.Messaging.SubscriptionOptions;
    } ///--------BACKWARD COMPATIBILITY-------///
    ///-------------------------------------///

  }]);
  return Backendless;
}();

var backendless = new Backendless(DEFAULT_PROPS);

if (root) {
  root.Backendless = backendless;
}

var _default = backendless;
exports["default"] = _default;
module.exports = backendless;