"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ajaxForBrowser = ajaxForBrowser;

var _utils = _interopRequireDefault(require("../utils"));

var parseResponse = function parseResponse(xhr) {
  var result = true;

  if (xhr.responseText) {
    result = _utils["default"].tryParseJSON(xhr.responseText);
  }

  return result;
};

var badResponse = function badResponse(xhr) {
  var result = {};

  try {
    result = JSON.parse(xhr.responseText);
  } catch (e) {
    result.message = xhr.responseText;
  }

  result.statusCode = xhr.status;
  result.message = result.message || 'unknown error occurred';
  return result;
};

var sendRequest = function sendRequest(XMLHttpRequest, config, userToken) {
  var xhr = new XMLHttpRequest();

  var query = _utils["default"].toQueryParams(config.query);

  var url = config.url + (query ? '?' + query : '');
  xhr.open(config.method, url, false);

  if (userToken) {
    xhr.setRequestHeader('user-token', userToken);
  }

  if (config.form) {
    var formData = new FormData();

    for (var key in config.form) {
      var value = config.form[key];

      if (value) {
        formData.append(key, value);
      }
    }

    config.data = formData;
  } else {
    var contentType = config.data ? 'application/json' : 'application/x-www-form-urlencoded';

    if (contentType === 'application/json' && config.data && typeof config.data !== 'string') {
      config.data = JSON.stringify(config.data);
    }

    xhr.setRequestHeader('Content-Type', contentType);
  }

  xhr.send(config.data);

  if (xhr.status >= 200 && xhr.status < 300) {
    return parseResponse(xhr);
  }

  throw badResponse(xhr);
};

function ajaxForBrowser(XMLHttpRequest, config, userToken) {
  config.method = config.method || 'GET';
  config.isAsync = typeof config.isAsync === 'boolean' ? config.isAsync : false;

  try {
    return sendRequest(XMLHttpRequest, config, userToken);
  } catch (error) {
    throw error;
  }
}