"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _query = _interopRequireDefault(require("./query"));

var _pagingQueryBuilder = _interopRequireDefault(require("./paging-query-builder"));

var _utils = _interopRequireDefault(require("../utils"));

var LoadRelationsQueryBuilder = /*#__PURE__*/function () {
  (0, _createClass2["default"])(LoadRelationsQueryBuilder, null, [{
    key: "create",
    value: function create() {
      return new LoadRelationsQueryBuilder();
    }
  }, {
    key: "of",
    value: function of(RelationModel) {
      return new LoadRelationsQueryBuilder(RelationModel);
    }
  }]);

  function LoadRelationsQueryBuilder(RelationModel) {
    (0, _classCallCheck2["default"])(this, LoadRelationsQueryBuilder);
    this._query = new _query["default"]();
    this._query.relationModel = RelationModel;
    this._paging = new _pagingQueryBuilder["default"]();
  }

  (0, _createClass2["default"])(LoadRelationsQueryBuilder, [{
    key: "setRelationModel",
    value: function setRelationModel(RelationModel) {
      this._query.relationModel = RelationModel;
    }
  }, {
    key: "setRelationName",
    value: function setRelationName(relationName) {
      this._query.setOption('relationName', relationName);

      return this;
    }
  }, {
    key: "setPageSize",
    value: function setPageSize(pageSize) {
      this._paging.setPageSize(pageSize);

      return this;
    }
  }, {
    key: "getPageSize",
    value: function getPageSize() {
      return this._paging.getPageSize();
    }
  }, {
    key: "setOffset",
    value: function setOffset(offset) {
      this._paging.setOffset(offset);

      return this;
    }
  }, {
    key: "getOffset",
    value: function getOffset() {
      return this._paging.getOffset();
    }
  }, {
    key: "prepareNextPage",
    value: function prepareNextPage() {
      this._paging.prepareNextPage();

      return this;
    }
  }, {
    key: "preparePreviousPage",
    value: function preparePreviousPage() {
      this._paging.preparePreviousPage();

      return this;
    }
  }, {
    key: "getProperties",
    value: function getProperties() {
      return this._query.properties;
    }
  }, {
    key: "setProperties",
    value: function setProperties(properties) {
      this._query.properties = _utils["default"].castArray(properties);
      return this;
    }
  }, {
    key: "addProperty",
    value: function addProperty(property) {
      this._query.addProperty(property);

      return this;
    }
  }, {
    key: "addProperties",
    value: function addProperties() {
      var _this = this;

      for (var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++) {
        properties[_key] = arguments[_key];
      }

      properties.forEach(function (p) {
        _utils["default"].castArray(p).forEach(function (property) {
          return _this._query.addProperty(property);
        });
      });
      return this;
    }
  }, {
    key: "addAllProperties",
    value: function addAllProperties() {
      this.addProperty('*');
      return this;
    }
  }, {
    key: "excludeProperty",
    value: function excludeProperty(property) {
      this._query.excludeProperties(property);

      return this;
    }
  }, {
    key: "excludeProperties",
    value: function excludeProperties() {
      var _this$_query;

      (_this$_query = this._query).excludeProperties.apply(_this$_query, arguments);

      return this;
    }
  }, {
    key: "getExcludeProperties",
    value: function getExcludeProperties() {
      return this._query.excludeProps;
    }
  }, {
    key: "getWhereClause",
    value: function getWhereClause() {
      return this._query.condition;
    }
  }, {
    key: "setWhereClause",
    value: function setWhereClause(whereClause) {
      this._query.condition = whereClause;
      return this;
    }
  }, {
    key: "getHavingClause",
    value: function getHavingClause() {
      return this._query.havingClause;
    }
  }, {
    key: "setHavingClause",
    value: function setHavingClause(havingClause) {
      this._query.havingClause = havingClause;
      return this;
    }
  }, {
    key: "getSortBy",
    value: function getSortBy() {
      return this._query.getOption('sortBy');
    }
  }, {
    key: "setSortBy",
    value: function setSortBy(sortBy) {
      this._query.setOption('sortBy', _utils["default"].castArray(sortBy));

      return this;
    }
  }, {
    key: "getGroupBy",
    value: function getGroupBy() {
      return this._query.getOption('groupBy');
    }
  }, {
    key: "setGroupBy",
    value: function setGroupBy(groupBy) {
      this._query.setOption('groupBy', _utils["default"].castArray(groupBy));

      return this;
    }
  }, {
    key: "getRelated",
    value: function getRelated() {
      return this._query.getOption('relations');
    }
  }, {
    key: "setRelated",
    value: function setRelated(relations) {
      this._query.setOption('relations', _utils["default"].castArray(relations));

      return this;
    }
  }, {
    key: "addRelated",
    value: function addRelated(relations) {
      var option = this._query.getOption('relations') || [];

      this._query.setOption('relations', option.concat(relations));

      return this;
    }
  }, {
    key: "getRelationsDepth",
    value: function getRelationsDepth() {
      return this._query.getOption('relationsDepth');
    }
  }, {
    key: "setRelationsDepth",
    value: function setRelationsDepth(relationsDepth) {
      this._query.setOption('relationsDepth', relationsDepth);

      return this;
    }
  }, {
    key: "getRelationsPageSize",
    value: function getRelationsPageSize() {
      return this._query.getOption('relationsPageSize');
    }
  }, {
    key: "setRelationsPageSize",
    value: function setRelationsPageSize(relationsPageSize) {
      this._query.setOption('relationsPageSize', relationsPageSize);

      return this;
    }
  }, {
    key: "build",
    value: function build() {
      this._query.setOptions(this._paging.build());

      return this._query;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var source = {
        pageSize: this._paging.pageSize,
        offset: this._paging.offset,
        props: this._query.properties,
        where: this._query.condition,
        having: this._query.havingClause,
        excludeProps: this._query.excludeProps,
        sortBy: this._query.options && this._query.options.sortBy,
        groupBy: this._query.options && this._query.options.groupBy,
        loadRelations: this._query.options && this._query.options.relations,
        relationsDepth: this._query.options && this._query.options.relationsDepth,
        relationsPageSize: this._query.options && this._query.options.relationsPageSize
      };
      var target = {};

      if (source.pageSize > 0) {
        target.pageSize = source.pageSize;
      }

      if (source.offset > 0) {
        target.offset = source.offset;
      }

      if (Array.isArray(source.props) && source.props.length) {
        target.props = source.props;
      }

      if (source.where) {
        target.where = source.where;
      }

      if (source.having) {
        target.having = source.having;
      }

      if (source.sortBy) {
        target.sortBy = source.sortBy;
      }

      if (source.groupBy) {
        target.groupBy = source.groupBy;
      }

      if (Array.isArray(source.excludeProps) && source.excludeProps.length) {
        target.excludeProps = source.excludeProps;
      }

      if (Array.isArray(source.loadRelations)) {
        target.loadRelations = source.loadRelations.length ? source.loadRelations : '*';
      }

      if (source.relationsDepth > 0) {
        target.relationsDepth = source.relationsDepth;
      }

      if (source.relationsPageSize > 0) {
        target.relationsPageSize = source.relationsPageSize;
      }

      return target;
    }
  }]);
  return LoadRelationsQueryBuilder;
}();

exports["default"] = LoadRelationsQueryBuilder;