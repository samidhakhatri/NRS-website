"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _geometry = _interopRequireDefault(require("./geometry"));

var _constants = require("./constants");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var GEOJSON_TYPE = _constants.GeoTypes.LINE_STRING;
var WKT_TYPE = GEOJSON_TYPE.toUpperCase();

var LineString = /*#__PURE__*/function (_Geometry) {
  (0, _inherits2["default"])(LineString, _Geometry);

  var _super = _createSuper(LineString);

  function LineString(points, srs) {
    var _this;

    (0, _classCallCheck2["default"])(this, LineString);
    _this = _super.call(this, srs);
    _this.points = points || [];
    return _this;
  }

  (0, _createClass2["default"])(LineString, [{
    key: "getPoints",
    value: function getPoints() {
      return this.points;
    }
  }, {
    key: "setPoints",
    value: function setPoints(points) {
      this.points = points;
      return this;
    }
    /**
     * @override
     */

  }, {
    key: "getGeojsonType",
    value: function getGeojsonType() {
      return GEOJSON_TYPE;
    }
    /**
     * @override
     */

  }, {
    key: "getWktType",
    value: function getWktType() {
      return WKT_TYPE;
    }
    /**
     * @override
     */

  }, {
    key: "jsonCoordinatePairs",
    value: function jsonCoordinatePairs() {
      var pointsArray = [];
      this.getPoints().forEach(function (point) {
        pointsArray.push([point.getX(), point.getY()]);
      });
      return pointsArray;
    }
    /**
     * @override
     */

  }, {
    key: "wktCoordinatePairs",
    value: function wktCoordinatePairs() {
      return this.getPoints().map(function (point) {
        return "".concat(point.getX(), " ").concat(point.getY());
      }).join(',');
    }
  }]);
  return LineString;
}(_geometry["default"]);

var _default = LineString;
exports["default"] = _default;