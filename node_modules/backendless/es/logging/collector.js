"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _utils = _interopRequireDefault(require("../utils"));

var _async = _interopRequireDefault(require("../request/async"));

var LoggingCollector = /*#__PURE__*/function () {
  /**
   * @param {Backendless} app
   */
  function LoggingCollector(app) {
    (0, _classCallCheck2["default"])(this, LoggingCollector);
    this.app = app;
    this.flush = _utils["default"].promisified(this.flush);
    this.flushSync = _utils["default"]["synchronized"](this.flush);
    this.reset();
  }

  (0, _createClass2["default"])(LoggingCollector, [{
    key: "reset",
    value: function reset() {
      this.lastFlushListeners = [];
      this.loggers = {};
      this.pool = [];
      this.numOfMessages = 10;
      this.timeFrequency = 1;
    }
  }, {
    key: "getLogger",
    value: function getLogger(loggerName) {
      if (!_utils["default"].isString(loggerName)) {
        throw new Error("Invalid 'loggerName' value. LoggerName must be a string value");
      }

      var _require = require('./logger'),
          Logger = _require["default"];

      var logger = this.loggers[loggerName] || new Logger(loggerName, this);
      this.loggers[loggerName] = logger;
      return logger;
    }
  }, {
    key: "push",
    value: function push(logger, logLevel, message, exception) {
      var messageObj = {
        logger: logger,
        message: message,
        exception: exception,
        'log-level': logLevel,
        timestamp: Date.now()
      };
      this.pool.push(messageObj);
      this.checkMessagesLen();
    }
  }, {
    key: "checkMessagesLen",
    value: function checkMessagesLen() {
      if (this.pool.length >= this.numOfMessages) {
        this.sendRequest();
      }
    }
  }, {
    key: "sendRequest",
    value: function sendRequest() {
      var _this = this;

      if (!this.flushInterval) {
        this.flushInterval = setTimeout(function () {
          return _this.flush();
        }, this.timeFrequency * 1000);
      }
    }
  }, {
    key: "setLogReportingPolicy",
    value: function setLogReportingPolicy(numOfMessages, timeFrequency) {
      this.numOfMessages = numOfMessages;
      this.timeFrequency = timeFrequency; //TODO: check when set new timeFrequency

      this.checkMessagesLen();
    }
  }, {
    key: "flush",
    value: function flush(asyncHandler) {
      if (this.pool.length) {
        if (this.flushInterval) {
          clearTimeout(this.flushInterval);
          delete this.flushInterval;
        }

        var listeners;
        var loggingCollector = this;

        var cb = function cb(method) {
          return function () {
            var _arguments = arguments;
            listeners.forEach(function (callbacks) {
              callbacks[method].apply(null, _arguments);
            });

            if (listeners === loggingCollector.lastFlushListeners) {
              loggingCollector.lastFlushListeners = null;
            }
          };
        };

        if (asyncHandler) {
          listeners = this.lastFlushListeners = this.lastFlushListeners ? this.lastFlushListeners.splice(0) : [];
          listeners.push(asyncHandler);
        }

        this.app.request.put({
          isAsync: !!asyncHandler,
          asyncHandler: asyncHandler && new _async["default"](cb('success'), cb('fault')),
          url: this.app.urls.logging(),
          data: this.pool
        });
        this.pool = [];
      } else if (asyncHandler) {
        if (this.lastFlushListeners) {
          this.lastFlushListeners.push(asyncHandler);
        } else {
          setTimeout(asyncHandler.success, 0);
        }
      }
    }
  }]);
  return LoggingCollector;
}();

var _default = LoggingCollector;
exports["default"] = _default;