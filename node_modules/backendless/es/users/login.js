"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.login = login;

var _utils = _interopRequireDefault(require("../utils"));

var _async = _interopRequireDefault(require("../request/async"));

var _utils2 = require("./utils");

function login(login, password, stayLoggedIn)
/** async */
{
  var data = {};

  if (typeof login === 'string' && arguments.length === 2 && password instanceof _async["default"]) {
    data.objectId = login;
  } else {
    if (!login) {
      throw new Error('Login can not be empty');
    }

    if (!password) {
      throw new Error('Password can not be empty');
    }

    data.login = login;
    data.password = password;
  }

  stayLoggedIn = stayLoggedIn === true;
  this.app.LocalCache.remove('user-token');
  this.app.LocalCache.remove('current-user-id');
  this.app.LocalCache.set('stayLoggedIn', false);

  var responder = _utils["default"].extractResponder(arguments);

  var isAsync = !!responder;

  if (responder) {
    responder = _utils2.wrapAsync.call(this, responder, stayLoggedIn);
  }

  var result = this.app.request.post({
    url: this.app.urls.userLogin(),
    isAsync: isAsync,
    asyncHandler: responder,
    data: data
  });

  if (!isAsync && result) {
    this.setLocalCurrentUser(_utils2.parseResponse.call(this, result, stayLoggedIn));
    result = _utils2.getUserFromResponse.call(this, this.getLocalCurrentUser());
  }

  return result;
}