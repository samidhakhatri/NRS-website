"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saveFile = saveFile;

var _utils = _interopRequireDefault(require("../utils"));

var _async = _interopRequireDefault(require("../request/async"));

var _urls = _interopRequireDefault(require("../urls"));

var toBase64 = function toBase64(content) {
  if (typeof Blob !== 'undefined') {
    if (!(content instanceof Blob)) {
      content = new Blob([content], {
        type: ''
      });
    }

    return new Promise(function (resolve, reject) {
      var reader = new FileReader();

      reader.onerror = function (error) {
        return reject(error);
      };

      reader.onload = function (event) {
        return resolve(event.target.result.split(';base64,')[1]);
      };

      reader.readAsDataURL(content);
    });
  }

  if (typeof Buffer !== 'undefined') {
    return Promise.resolve(Buffer.from(content).toString('base64'));
  }

  return Promise.resolve(content);
};

var sanitizeFileName = function sanitizeFileName(fileName) {
  return encodeURIComponent(fileName).replace(/'/g, '%27').replace(/"/g, '%22');
};
/**
 * @param {String} filePath
 * @param {String} fileName
 * @param {String|Uint8Array} fileContent
 * @param {Boolean} overwrite
 * @param {Async} asyncHandler
 * @returns {Promise.<String>}
 */


function saveFile(filePath, fileName, fileContent, overwrite, asyncHandler) {
  var _this = this;

  if (!filePath || !_utils["default"].isString(filePath)) {
    throw new Error('Missing value for the "path" argument. The argument must contain a string value');
  }

  if (!fileName || !_utils["default"].isString(fileName)) {
    throw new Error('Missing value for the "fileName" argument. The argument must contain a string value');
  }

  if (overwrite instanceof _async["default"]) {
    asyncHandler = overwrite;
    overwrite = undefined;
  }

  return toBase64(fileContent).then(function (fileContent) {
    var query = {};

    if (_utils["default"].isBoolean(overwrite)) {
      query.overwrite = overwrite;
    }

    return _this.app.request.put({
      url: "".concat(_this.app.urls.fileBinaryPath(filePath), "/").concat(sanitizeFileName(fileName)),
      query: query,
      headers: {
        'Content-Type': 'text/plain'
      },
      data: fileContent,
      asyncHandler: asyncHandler
    });
  });
}