"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadItems = loadItems;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _utils = _interopRequireDefault(require("../utils"));

var _cluster = _interopRequireDefault(require("./cluster"));

var _point = _interopRequireDefault(require("./point"));

var _queryValidator = require("./query-validator");

var _queryParams = require("./query-params");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

//TODO: refactor me
function loadItems(query, asyncHandler) {
  (0, _queryValidator.validateQueryObject)(query);
  var url = query.url + (query.searchRectangle ? '/rect' : '/points') + '?' + (0, _queryParams.toQueryParams)(query);

  if (asyncHandler) {
    asyncHandler = _utils["default"].wrapAsync(asyncHandler, function (resp) {
      return responseParser(resp, query);
    });
  }

  var result = this.app.request.get({
    url: url,
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler
  });

  if (asyncHandler) {
    return result;
  }

  return responseParser(result, query);
}

function responseParser(resp, geoQuery) {
  return resp.map(function (geoObject) {
    var GeoItem = geoObject.hasOwnProperty('totalPoints') ? _cluster["default"] : _point["default"];
    return new GeoItem(_objectSpread(_objectSpread({}, geoObject), {}, {
      geoQuery: geoQuery
    }));
  });
}